// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/a1008u/go-grpc/helloworld (interfaces: GreeterClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	helloworld "github.com/a1008u/go-grpc/helloworld"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockGreeterClient is a mock of GreeterClient interface
type MockGreeterClient struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterClientMockRecorder
}

// MockGreeterClientMockRecorder is the mock recorder for MockGreeterClient
type MockGreeterClientMockRecorder struct {
	mock *MockGreeterClient
}

// NewMockGreeterClient creates a new mock instance
func NewMockGreeterClient(ctrl *gomock.Controller) *MockGreeterClient {
	mock := &MockGreeterClient{ctrl: ctrl}
	mock.recorder = &MockGreeterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGreeterClient) EXPECT() *MockGreeterClientMockRecorder {
	return m.recorder
}

// SayHello mocks base method
func (m *MockGreeterClient) SayHello(arg0 context.Context, arg1 *helloworld.HelloRequest, arg2 ...grpc.CallOption) (*helloworld.HelloReply, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*helloworld.HelloReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello
func (mr *MockGreeterClientMockRecorder) SayHello(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockGreeterClient)(nil).SayHello), varargs...)
}

// SayHelloClientSideStreaming mocks base method
func (m *MockGreeterClient) SayHelloClientSideStreaming(arg0 context.Context, arg1 ...grpc.CallOption) (helloworld.Greeter_SayHelloClientSideStreamingClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHelloClientSideStreaming", varargs...)
	ret0, _ := ret[0].(helloworld.Greeter_SayHelloClientSideStreamingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHelloClientSideStreaming indicates an expected call of SayHelloClientSideStreaming
func (mr *MockGreeterClientMockRecorder) SayHelloClientSideStreaming(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHelloClientSideStreaming", reflect.TypeOf((*MockGreeterClient)(nil).SayHelloClientSideStreaming), varargs...)
}

// SayHelloServerSideStreaming mocks base method
func (m *MockGreeterClient) SayHelloServerSideStreaming(arg0 context.Context, arg1 *helloworld.HelloRequest, arg2 ...grpc.CallOption) (helloworld.Greeter_SayHelloServerSideStreamingClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHelloServerSideStreaming", varargs...)
	ret0, _ := ret[0].(helloworld.Greeter_SayHelloServerSideStreamingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHelloServerSideStreaming indicates an expected call of SayHelloServerSideStreaming
func (mr *MockGreeterClientMockRecorder) SayHelloServerSideStreaming(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHelloServerSideStreaming", reflect.TypeOf((*MockGreeterClient)(nil).SayHelloServerSideStreaming), varargs...)
}

// SayHelloStreaming mocks base method
func (m *MockGreeterClient) SayHelloStreaming(arg0 context.Context, arg1 ...grpc.CallOption) (helloworld.Greeter_SayHelloStreamingClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHelloStreaming", varargs...)
	ret0, _ := ret[0].(helloworld.Greeter_SayHelloStreamingClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHelloStreaming indicates an expected call of SayHelloStreaming
func (mr *MockGreeterClientMockRecorder) SayHelloStreaming(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHelloStreaming", reflect.TypeOf((*MockGreeterClient)(nil).SayHelloStreaming), varargs...)
}
